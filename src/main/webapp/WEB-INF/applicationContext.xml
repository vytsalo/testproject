<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">


    <!-- ИСКАТЬ РЕСУРСЫ В ВЕБ ИНФ-->
    <mvc:resources mapping="/**" location="/WEB-INF/" />
    <mvc:annotation-driven/>
    <tx:annotation-driven />

    <context:component-scan base-package="controller, dao, service" />

    <bean class="org.springframework.orm.jpa.JpaTransactionManager" id="transactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- начало пути файла вьюшки  -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <!-- конец пути файла вьюшки -->
        <property name="suffix" value=".jsp" />
    </bean>


    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">

        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5432/postgres" /> <!--?characterEncoding=UTF-8-->
        <property name="username" value="postgres" />
        <property name="password"  value="postgres" />
     <!--   <property name="connectionProperties">
            <props>
                <prop key="useUnicode">yes</prop>
                <prop key="characterEncoding">utf8</prop>
            </props>
        </property>-->
    </bean>


    <!--data-source="dataSource"-->
    <jdbc:initialize-database>
        <jdbc:script location="classpath:/import.sql" />
    </jdbc:initialize-database>

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">

        <property name="dataSource" ref = "dataSource"/>

        <property name="packagesToScan" value="entities"/>

        <property name="jpaVendorAdapter" >
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>

        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQL9Dialect</prop>
                <prop key="hibernate.hbm2ddl.auto">create</prop>
                <prop key="hibernate.max_fetch_depth">2</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>

         <!--       <prop key="hibernate.hbm2ddl.import_files">import.sql</prop>-->


<!--                <prop key="hibernate.connection.useUnicode"  >true</prop>
                <prop key="hibernate.connection.characterEncoding"  >UTF-8</prop>
                <prop key="hibernate.connection.charSet" >UTF-8</prop>
                <prop key="hibernate.hbm2ddl.charset_name" >UTF-8</prop>-->
<!--
Hibernate will create the database when the entity manager factory is created (actually when Hibernate's SessionFactory
 is created by the entity manager factory). If a file named import.sql exists in the root of the
 class path ('/import.sql') Hibernate will execute the SQL statements read from the file after the creation
  of the database schema. It is important to remember that before Hibernate creates the schema it empties it
   (delete all tables, constraints, or any other database object that is going to be created in the process
   of building the schema).
                <prop key="javax.persistence.sql-load-script-source" >classpath:/import.sql</prop>-->

            </props>
        </property>
    </bean>


</beans>